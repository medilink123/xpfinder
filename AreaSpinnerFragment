package com.medilink.xpmedilinklocator;

import static android.provider.BaseColumns._ID;
import android.database.Cursor;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.CursorLoader;
import android.support.v4.content.Loader;
import android.support.v4.widget.CursorAdapter;
import android.support.v4.widget.SimpleCursorAdapter;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.Spinner;

public class AreaSpinnerFragment extends Fragment implements LoaderManager.LoaderCallbacks<Cursor>
{
    private SimpleCursorAdapter spinnerAdaptor;

    //Area
    private static String[] fromArea = { _ID, DbConstants.BranchArea, DbConstants.BranchName, DbConstants.BranchAddress, DbConstants.BranchLatitude, DbConstants.BranchLongitude, DbConstants.BranchContactNo, };
    private static int[] toAreaSpinner = {android.R.id.text1, android.R.id.text1, }; //text1 is Android's default TextView for a spinner.

    //Controls
    private ControlListener listener = null;
    private static Spinner spinnerArea;

    static int intSelectedAreaNamePosition;

    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
    }

    /** Called when the fragment view is first created. */
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
    {
        View v = inflater.inflate(R.layout.spinner_fragment, container, false);

        spinnerArea = (Spinner) v.findViewById(R.id.spinner_area);
        spinnerArea.setOnItemSelectedListener(new SetOnItemSelectedListener()); //Set onItemClicked
        spinnerArea.setOnTouchListener(spinnerOnTouch); //Set setOnTouchListener

        getLoaderManager().initLoader(0, null, this);

        spinnerAdaptor = new SimpleCursorAdapter
                (
                        getActivity().getApplicationContext(), android.R.layout.select_dialog_item,
                        null, fromArea, toAreaSpinner,
                        CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER
                );

        spinnerAdaptor.setDropDownViewResource(android.R.layout.simple_dropdown_item_1line);
        spinnerArea.setAdapter(spinnerAdaptor);	//bind drop down to spinner

        return v;
    }

	/* Methods */
    /** This method sets isGotoMapEnded tag to false on User's Spinner Click/Touch */
    private View.OnTouchListener spinnerOnTouch = new View.OnTouchListener()
    {
        public boolean onTouch(View v, MotionEvent event)
        {
            if (event.getAction() == MotionEvent.ACTION_UP)
            {
                //Set to False, once user manually choose spinner
                ((SearchMapFragmentActivity) getActivity()).isGotoMapEnded = false;
            }
            return false;
        }
    };

    /** This method passes branch details (in Cursor) upon User's Spinner Item Selection */
    public class SetOnItemSelectedListener implements OnItemSelectedListener
    {
        public void onItemSelected(AdapterView<?> parent, View view, int pos, long id)
        {
            if (listener!=null)
            {
                listener.onSpinnerItemSelected((Cursor) parent.getItemAtPosition(pos));
            }
        }

        public void onNothingSelected(AdapterView parent)
        {
            // Do nothing.
        }
    }

    /** This method sets AreaSpinner's Listener for Spinner's onItemClicked */
    public void setAreaSpinnerListener(ControlListener passedlistener)
    {
        this.listener = passedlistener; //Set ControlListener for Spinner's onItemClicked
    }

    /** This method makes spinnerArea selects the currently selected item passed (for Show My Current Location in Option Menu Only) */
    public static void selectSpinnerForShowMyLocationMenu(int indexTobeSelected)
    {
        intSelectedAreaNamePosition = indexTobeSelected;
        spinnerArea.setSelection(intSelectedAreaNamePosition);
    }

    /* Loader Methods */
    //These methods will be in charge of re-query if needed
    @Override
    public Loader<Cursor> onCreateLoader(int arg0, Bundle arg1)
    {
        // Creates a new loader after the initLoader () call
        CursorLoader cursorLoader = new CursorLoader(getActivity(),
                DbContentProvider.AREA_CONTENT_URI, fromArea, null, null, DbConstants.BranchArea + " asc" );

        return cursorLoader;
    }

    @Override
    public void onLoadFinished(Loader<Cursor> arg0, Cursor cursor)
    {
        // The asynchronous load is complete and the data
        // is now available for use. Only now can we associate
        // the queried Cursor with the SimpleCursorAdapter.
        spinnerAdaptor.swapCursor(cursor); // The spinner now displays the queried data.
        spinnerArea.setSelection(intSelectedAreaNamePosition); //Select current location's Area Name (since the map loads faster than spinner, we set the assignment here)
    }

    @Override
    public void onLoaderReset(Loader<Cursor> arg0)
    {
        // For whatever reason, the Loader's data is now unavailable.
        // Remove any references to the old data by replacing it with
        // a null Cursor.
        spinnerAdaptor.swapCursor(null);
    }
}
